/* Auto-generated by genmsg_cpp for file /home/parallels/fuerte_workspace/oryxssr/action_test/msg/FibonacciGoal.msg */
#ifndef ACTION_TEST_MESSAGE_FIBONACCIGOAL_H
#define ACTION_TEST_MESSAGE_FIBONACCIGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace action_test
{
template <class ContainerAllocator>
struct FibonacciGoal_ {
  typedef FibonacciGoal_<ContainerAllocator> Type;

  FibonacciGoal_()
  : order(0)
  {
  }

  FibonacciGoal_(const ContainerAllocator& _alloc)
  : order(0)
  {
  }

  typedef int32_t _order_type;
  int32_t order;


  typedef boost::shared_ptr< ::action_test::FibonacciGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_test::FibonacciGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FibonacciGoal
typedef  ::action_test::FibonacciGoal_<std::allocator<void> > FibonacciGoal;

typedef boost::shared_ptr< ::action_test::FibonacciGoal> FibonacciGoalPtr;
typedef boost::shared_ptr< ::action_test::FibonacciGoal const> FibonacciGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::action_test::FibonacciGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::action_test::FibonacciGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace action_test

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::action_test::FibonacciGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::action_test::FibonacciGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::action_test::FibonacciGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6889063349a00b249bd1661df429d822";
  }

  static const char* value(const  ::action_test::FibonacciGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6889063349a00b24ULL;
  static const uint64_t static_value2 = 0x9bd1661df429d822ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_test::FibonacciGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "action_test/FibonacciGoal";
  }

  static const char* value(const  ::action_test::FibonacciGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::action_test::FibonacciGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
int32 order\n\
\n\
";
  }

  static const char* value(const  ::action_test::FibonacciGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::action_test::FibonacciGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::action_test::FibonacciGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.order);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FibonacciGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_test::FibonacciGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::action_test::FibonacciGoal_<ContainerAllocator> & v) 
  {
    s << indent << "order: ";
    Printer<int32_t>::stream(s, indent + "  ", v.order);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ACTION_TEST_MESSAGE_FIBONACCIGOAL_H

