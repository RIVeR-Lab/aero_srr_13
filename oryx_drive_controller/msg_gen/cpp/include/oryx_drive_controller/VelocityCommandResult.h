/* Auto-generated by genmsg_cpp for file /home/aruis/groovy_workspace/oryx_srr/oryx_drive_controller/msg/VelocityCommandResult.msg */
#ifndef ORYX_DRIVE_CONTROLLER_MESSAGE_VELOCITYCOMMANDRESULT_H
#define ORYX_DRIVE_CONTROLLER_MESSAGE_VELOCITYCOMMANDRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace oryx_drive_controller
{
template <class ContainerAllocator>
struct VelocityCommandResult_ {
  typedef VelocityCommandResult_<ContainerAllocator> Type;

  VelocityCommandResult_()
  : success(false)
  , capable(false)
  {
  }

  VelocityCommandResult_(const ContainerAllocator& _alloc)
  : success(false)
  , capable(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef uint8_t _capable_type;
  uint8_t capable;


  typedef boost::shared_ptr< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VelocityCommandResult
typedef  ::oryx_drive_controller::VelocityCommandResult_<std::allocator<void> > VelocityCommandResult;

typedef boost::shared_ptr< ::oryx_drive_controller::VelocityCommandResult> VelocityCommandResultPtr;
typedef boost::shared_ptr< ::oryx_drive_controller::VelocityCommandResult const> VelocityCommandResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace oryx_drive_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e59ed3dd007d15d0c6611c9efabb1f70";
  }

  static const char* value(const  ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe59ed3dd007d15d0ULL;
  static const uint64_t static_value2 = 0xc6611c9efabb1f70ULL;
};

template<class ContainerAllocator>
struct DataType< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "oryx_drive_controller/VelocityCommandResult";
  }

  static const char* value(const  ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
bool success\n\
bool capable\n\
\n\
";
  }

  static const char* value(const  ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.capable);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VelocityCommandResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::oryx_drive_controller::VelocityCommandResult_<ContainerAllocator> & v) 
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "capable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.capable);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORYX_DRIVE_CONTROLLER_MESSAGE_VELOCITYCOMMANDRESULT_H

