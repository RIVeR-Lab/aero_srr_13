/* Auto-generated by genmsg_cpp for file /home/parallels/groovy_workspace/oryx_srr/oryx_drive_controller/msg/VelocityCommandFeedback.msg */
#ifndef ORYX_DRIVE_CONTROLLER_MESSAGE_VELOCITYCOMMANDFEEDBACK_H
#define ORYX_DRIVE_CONTROLLER_MESSAGE_VELOCITYCOMMANDFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace oryx_drive_controller
{
template <class ContainerAllocator>
struct VelocityCommandFeedback_ {
  typedef VelocityCommandFeedback_<ContainerAllocator> Type;

  VelocityCommandFeedback_()
  : velocity(0.0)
  , omega(0.0)
  {
  }

  VelocityCommandFeedback_(const ContainerAllocator& _alloc)
  : velocity(0.0)
  , omega(0.0)
  {
  }

  typedef double _velocity_type;
  double velocity;

  typedef double _omega_type;
  double omega;


  typedef boost::shared_ptr< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VelocityCommandFeedback
typedef  ::oryx_drive_controller::VelocityCommandFeedback_<std::allocator<void> > VelocityCommandFeedback;

typedef boost::shared_ptr< ::oryx_drive_controller::VelocityCommandFeedback> VelocityCommandFeedbackPtr;
typedef boost::shared_ptr< ::oryx_drive_controller::VelocityCommandFeedback const> VelocityCommandFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace oryx_drive_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "add8db4e00c9f574e9d67a8e40e73988";
  }

  static const char* value(const  ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xadd8db4e00c9f574ULL;
  static const uint64_t static_value2 = 0xe9d67a8e40e73988ULL;
};

template<class ContainerAllocator>
struct DataType< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "oryx_drive_controller/VelocityCommandFeedback";
  }

  static const char* value(const  ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
float64 velocity\n\
float64 omega\n\
\n\
";
  }

  static const char* value(const  ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.velocity);
    stream.next(m.omega);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VelocityCommandFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::oryx_drive_controller::VelocityCommandFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "omega: ";
    Printer<double>::stream(s, indent + "  ", v.omega);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORYX_DRIVE_CONTROLLER_MESSAGE_VELOCITYCOMMANDFEEDBACK_H

