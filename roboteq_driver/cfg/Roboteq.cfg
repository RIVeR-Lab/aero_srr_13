#! /usr/bin/env python

PACKAGE='roboteq_driver'
import roslib; roslib.load_manifest(PACKAGE)

from device_driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

#       Name                   Type      Reconfiguration level             Description         Default   Min   Max
gen.add("port",                str_t,    SensorLevels.RECONFIGURE_STOPPED, "The port threw which to talk to the device", "/dev/ttyACM0")

gen.add("max_rpm",             double_t,    SensorLevels.RECONFIGURE_STOPPED, "Max RPM", 250, 0, 5000)
gen.add("ppr",                 double_t,    SensorLevels.RECONFIGURE_STOPPED, "Pulses Per Rotation", 250, 0, 5000)

gen.add("feedback_rate",       double_t, SensorLevels.RECONFIGURE_OPEN, "The rate at which feedback is published", 20, 0, 100)
gen.add("control_rate",        double_t, SensorLevels.RECONFIGURE_OPEN, "The throttled rate at which control messages are sent to the controller", 10, 0, 100)

gen.add("control_topic",       str_t,    SensorLevels.RECONFIGURE_OPEN, "The root frame of the battery", "roboteq_control")
gen.add("info_topic",          str_t,    SensorLevels.RECONFIGURE_OPEN, "The topic on which battery information is published", "roboteq_info")
gen.add("pause_topic",         str_t,    SensorLevels.RECONFIGURE_OPEN, "The topic on which temperature information is publised", "/pause")

gen.add("current_reset_rate",                 double_t,    SensorLevels.RECONFIGURE_STOPPED, "Pulses Per Rotation", 250, 0, 5000)

exit(gen.generate(PACKAGE, "roboteq_driver", "Roboteq"))
