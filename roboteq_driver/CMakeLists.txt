cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

#common commands for building c++ executables and libraries
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)

include_directories(include src/roboteq_lib)

rosbuild_add_library(serial_driver_base src/serial_lib.cpp)

rosbuild_add_library(${PROJECT_NAME}RoboteqLib src/roboteq_lib/RoboteqDevice.cpp src/roboteq_motor_controller.cpp)
target_link_libraries(${PROJECT_NAME}RoboteqLib serial_driver_base)


rosbuild_add_library(roboteq_manager_lib src/roboteq_manager_lib.cpp)

rosbuild_add_executable(roboteq_manager src/roboteq_manager.cpp)
target_link_libraries(roboteq_manager ${PROJECT_NAME}RoboteqLib)

rosbuild_add_executable(drive_motors src/util/drive_motors.cpp)
target_link_libraries(drive_motors ${PROJECT_NAME}RoboteqLib)

rosbuild_add_executable(simple_twist_client src/util/simple_twist_client.cpp)
target_link_libraries(simple_twist_client roboteq_manager_lib)
