"""autogenerated by genpy from EposManager/GroupEPOSControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import EposManager.msg

class GroupEPOSControl(genpy.Message):
  _md5sum = "58778ccf9bb7db6f7ccd5eaa3d10b6d8"
  _type = "EposManager/GroupEPOSControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This represents a control structure for a Maxon motor attached to an EPOS 2 controller.  
# The node_id is the node_id set on the epos controller itself
# The control_mode corresponds with the desired mode of control
# The setpoint corresponds with the desired value for the selected mode

EPOSControl[] motor_group

================================================================================
MSG: EposManager/EPOSControl
# This represents a control structure for a Maxon motor attached to an EPOS 2 controller.  
# The node_id is the node_id set on the epos controller itself
# The control_mode corresponds with the desired mode of control
# The setpoint corresponds with the desired value for the selected mode

# Control Mode Options
uint8 VELOCITY =1
uint8 ABSOLUTE_POSITION = 2
uint8 ABSOLUTE_POSITION_IMMEDIATE = 3
uint8 RELATIVE_POSITION = 4
uint8 RELATIVE_POSITION_IMMEDIATE = 5


uint16 node_id
uint8 control_mode
int32 setpoint





"""
  __slots__ = ['motor_group']
  _slot_types = ['EposManager/EPOSControl[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor_group

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GroupEPOSControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motor_group is None:
        self.motor_group = []
    else:
      self.motor_group = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.motor_group)
      buff.write(_struct_I.pack(length))
      for val1 in self.motor_group:
        _x = val1
        buff.write(_struct_HBi.pack(_x.node_id, _x.control_mode, _x.setpoint))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.motor_group is None:
        self.motor_group = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motor_group = []
      for i in range(0, length):
        val1 = EposManager.msg.EPOSControl()
        _x = val1
        start = end
        end += 7
        (_x.node_id, _x.control_mode, _x.setpoint,) = _struct_HBi.unpack(str[start:end])
        self.motor_group.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.motor_group)
      buff.write(_struct_I.pack(length))
      for val1 in self.motor_group:
        _x = val1
        buff.write(_struct_HBi.pack(_x.node_id, _x.control_mode, _x.setpoint))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.motor_group is None:
        self.motor_group = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motor_group = []
      for i in range(0, length):
        val1 = EposManager.msg.EPOSControl()
        _x = val1
        start = end
        end += 7
        (_x.node_id, _x.control_mode, _x.setpoint,) = _struct_HBi.unpack(str[start:end])
        self.motor_group.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_HBi = struct.Struct("<HBi")
