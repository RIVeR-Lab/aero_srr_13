"""autogenerated by genpy from EposManager/MotorInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class MotorInfo(genpy.Message):
  _md5sum = "f0af010a942d4953f1738bc4cb3bf83c"
  _type = "EposManager/MotorInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This represents the motor information of a specific motor
# node_id is the node_id set on the EPOS Controller itself
# motor_name is the name of the motor, as assigned by the user
# enabled indicated whether or not the motor is enabled or disabled
# motor_mode is the mode the motor is in (velocity, position, current)
# motor_velocity is the velocity of the motor in rpm
# motor_position is the position of the motor in encoder counts
# motor_current is the current on the motor in milliamps

uint16 node_id
string motor_name
uint16 state
string faults
int32 motor_velocity
int32 motor_position
int32 motor_current
time stamp

"""
  __slots__ = ['node_id','motor_name','state','faults','motor_velocity','motor_position','motor_current','stamp']
  _slot_types = ['uint16','string','uint16','string','int32','int32','int32','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       node_id,motor_name,state,faults,motor_velocity,motor_position,motor_current,stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.node_id is None:
        self.node_id = 0
      if self.motor_name is None:
        self.motor_name = ''
      if self.state is None:
        self.state = 0
      if self.faults is None:
        self.faults = ''
      if self.motor_velocity is None:
        self.motor_velocity = 0
      if self.motor_position is None:
        self.motor_position = 0
      if self.motor_current is None:
        self.motor_current = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
    else:
      self.node_id = 0
      self.motor_name = ''
      self.state = 0
      self.faults = ''
      self.motor_velocity = 0
      self.motor_position = 0
      self.motor_current = 0
      self.stamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_H.pack(self.node_id))
      _x = self.motor_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_H.pack(self.state))
      _x = self.faults
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i2I.pack(_x.motor_velocity, _x.motor_position, _x.motor_current, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      start = end
      end += 2
      (self.node_id,) = _struct_H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_name = str[start:end].decode('utf-8')
      else:
        self.motor_name = str[start:end]
      start = end
      end += 2
      (self.state,) = _struct_H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.faults = str[start:end].decode('utf-8')
      else:
        self.faults = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.motor_velocity, _x.motor_position, _x.motor_current, _x.stamp.secs, _x.stamp.nsecs,) = _struct_3i2I.unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_H.pack(self.node_id))
      _x = self.motor_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_H.pack(self.state))
      _x = self.faults
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i2I.pack(_x.motor_velocity, _x.motor_position, _x.motor_current, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      start = end
      end += 2
      (self.node_id,) = _struct_H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_name = str[start:end].decode('utf-8')
      else:
        self.motor_name = str[start:end]
      start = end
      end += 2
      (self.state,) = _struct_H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.faults = str[start:end].decode('utf-8')
      else:
        self.faults = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.motor_velocity, _x.motor_position, _x.motor_current, _x.stamp.secs, _x.stamp.nsecs,) = _struct_3i2I.unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_H = struct.Struct("<H")
_struct_3i2I = struct.Struct("<3i2I")
