/* Auto-generated by genmsg_cpp for file /home/parallels/fuerte_workspace/oryxssr/EposManager/msg/MotorInfo.msg */
#ifndef EPOSMANAGER_MESSAGE_MOTORINFO_H
#define EPOSMANAGER_MESSAGE_MOTORINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace EposManager
{
template <class ContainerAllocator>
struct MotorInfo_ {
  typedef MotorInfo_<ContainerAllocator> Type;

  MotorInfo_()
  : node_id(0)
  , motor_name()
  , state(0)
  , faults()
  , motor_velocity(0)
  , motor_position(0)
  , motor_current(0)
  , stamp()
  {
  }

  MotorInfo_(const ContainerAllocator& _alloc)
  : node_id(0)
  , motor_name(_alloc)
  , state(0)
  , faults(_alloc)
  , motor_velocity(0)
  , motor_position(0)
  , motor_current(0)
  , stamp()
  {
  }

  typedef uint16_t _node_id_type;
  uint16_t node_id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motor_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  motor_name;

  typedef uint16_t _state_type;
  uint16_t state;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _faults_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  faults;

  typedef int32_t _motor_velocity_type;
  int32_t motor_velocity;

  typedef int32_t _motor_position_type;
  int32_t motor_position;

  typedef int32_t _motor_current_type;
  int32_t motor_current;

  typedef ros::Time _stamp_type;
  ros::Time stamp;


  typedef boost::shared_ptr< ::EposManager::MotorInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::EposManager::MotorInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MotorInfo
typedef  ::EposManager::MotorInfo_<std::allocator<void> > MotorInfo;

typedef boost::shared_ptr< ::EposManager::MotorInfo> MotorInfoPtr;
typedef boost::shared_ptr< ::EposManager::MotorInfo const> MotorInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::EposManager::MotorInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::EposManager::MotorInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace EposManager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::EposManager::MotorInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::EposManager::MotorInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::EposManager::MotorInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f0af010a942d4953f1738bc4cb3bf83c";
  }

  static const char* value(const  ::EposManager::MotorInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf0af010a942d4953ULL;
  static const uint64_t static_value2 = 0xf1738bc4cb3bf83cULL;
};

template<class ContainerAllocator>
struct DataType< ::EposManager::MotorInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "EposManager/MotorInfo";
  }

  static const char* value(const  ::EposManager::MotorInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::EposManager::MotorInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This represents the motor information of a specific motor\n\
# node_id is the node_id set on the EPOS Controller itself\n\
# motor_name is the name of the motor, as assigned by the user\n\
# enabled indicated whether or not the motor is enabled or disabled\n\
# motor_mode is the mode the motor is in (velocity, position, current)\n\
# motor_velocity is the velocity of the motor in rpm\n\
# motor_position is the position of the motor in encoder counts\n\
# motor_current is the current on the motor in milliamps\n\
\n\
uint16 node_id\n\
string motor_name\n\
uint16 state\n\
string faults\n\
int32 motor_velocity\n\
int32 motor_position\n\
int32 motor_current\n\
time stamp\n\
\n\
";
  }

  static const char* value(const  ::EposManager::MotorInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::EposManager::MotorInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.node_id);
    stream.next(m.motor_name);
    stream.next(m.state);
    stream.next(m.faults);
    stream.next(m.motor_velocity);
    stream.next(m.motor_position);
    stream.next(m.motor_current);
    stream.next(m.stamp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotorInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::EposManager::MotorInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::EposManager::MotorInfo_<ContainerAllocator> & v) 
  {
    s << indent << "node_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.node_id);
    s << indent << "motor_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motor_name);
    s << indent << "state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state);
    s << indent << "faults: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.faults);
    s << indent << "motor_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor_velocity);
    s << indent << "motor_position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor_position);
    s << indent << "motor_current: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor_current);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EPOSMANAGER_MESSAGE_MOTORINFO_H

